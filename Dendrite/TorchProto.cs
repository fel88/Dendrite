// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: caffe2_proto_torch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Torch
{

    /// <summary>Holder for reflection information generated from caffe2_proto_torch.proto</summary>
    public static partial class Caffe2ProtoTorchReflection
    {

        #region Descriptor
        /// <summary>File descriptor for caffe2_proto_torch.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static Caffe2ProtoTorchReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChhjYWZmZTJfcHJvdG9fdG9yY2gucHJvdG8SBXRvcmNoGhljYWZmZTIvcHJv",
                  "dG8vY2FmZmUyLnByb3RvIhgKCVJlY29yZFJlZhILCgNrZXkYASABKAkisgEK",
                  "CVRlbnNvckRlZhIMCgRkaW1zGAEgAygDEg4KBm9mZnNldBgCIAEoAxIPCgdz",
                  "dHJpZGVzGAMgAygDEhUKDXJlcXVpcmVzX2dyYWQYBCABKAgSLwoJZGF0YV90",
                  "eXBlGAUgASgOMhwuY2FmZmUyLlRlbnNvclByb3RvLkRhdGFUeXBlEh4KBGRh",
                  "dGEYBiABKAsyEC50b3JjaC5SZWNvcmRSZWYSDgoGZGV2aWNlGAcgASgJIjYK",
                  "DEF0dHJpYnV0ZURlZhIMCgR0eXBlGAEgAigJEgwKBG5hbWUYAiACKAkSCgoC",
                  "aWQYAyACKAMiQgoMUGFyYW1ldGVyRGVmEhEKCWlzX2J1ZmZlchgBIAEoCBIR",
                  "Cgl0ZW5zb3JfaWQYAiABKAMSDAoEbmFtZRgDIAEoCSLiAgoJTW9kdWxlRGVm",
                  "EiQKCnN1Ym1vZHVsZXMYASADKAsyEC50b3JjaC5Nb2R1bGVEZWYSKwoRdG9y",
                  "Y2hzY3JpcHRfYXJlbmEYAiABKAsyEC50b3JjaC5SZWNvcmRSZWYSIwoLY2Fm",
                  "ZmUyX25ldHMYAyADKAsyDi5jYWZmZTIuTmV0RGVmEiYKDHBpY2tsZV9hcmVu",
                  "YRgEIAEoCzIQLnRvcmNoLlJlY29yZFJlZhIjCgljcHBfYXJlbmEYBSABKAsy",
                  "EC50b3JjaC5SZWNvcmRSZWYSJwoKcGFyYW1ldGVycxgGIAMoCzITLnRvcmNo",
                  "LlBhcmFtZXRlckRlZhIMCgRuYW1lGAcgASgJEhAKCG9wdGltaXplGAggASgI",
                  "EicKCmF0dHJpYnV0ZXMYCSADKAsyEy50b3JjaC5BdHRyaWJ1dGVEZWYSHgoW",
                  "Z2V0X3N0YXRlX2F0dHJpYnV0ZV9pZBgKIAEoAyI1CgZMaWJEZWYSKwoRdG9y",
                  "Y2hzY3JpcHRfYXJlbmEYASABKAsyEC50b3JjaC5SZWNvcmRSZWYiqAEKCE1v",
                  "ZGVsRGVmEhUKDXByb3RvX3ZlcnNpb24YASABKAMSJQoLbWFpbl9tb2R1bGUY",
                  "AiABKAsyEC50b3JjaC5Nb2R1bGVEZWYSFQoNcHJvZHVjZXJfbmFtZRgDIAEo",
                  "CRIYChBwcm9kdWNlcl92ZXJzaW9uGAQgASgJEiEKB3RlbnNvcnMYBSADKAsy",
                  "EC50b3JjaC5UZW5zb3JEZWZKBAgJEApSBGxpYnMqKAoMUHJvdG9WZXJzaW9u",
                  "EhgKFFBST1RPX1ZFUlNJT05fTkVXRVNUEAU="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::Caffe2.Caffe2Reflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Torch.ProtoVersion), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.RecordRef), global::Torch.RecordRef.Parser, new[]{ "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.TensorDef), global::Torch.TensorDef.Parser, new[]{ "Dims", "Offset", "Strides", "RequiresGrad", "DataType", "Data", "Device" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.AttributeDef), global::Torch.AttributeDef.Parser, new[]{ "Type", "Name", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.ParameterDef), global::Torch.ParameterDef.Parser, new[]{ "IsBuffer", "TensorId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.ModuleDef), global::Torch.ModuleDef.Parser, new[]{ "Submodules", "TorchscriptArena", "Caffe2Nets", "PickleArena", "CppArena", "Parameters", "Name", "Optimize", "Attributes", "GetStateAttributeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.LibDef), global::Torch.LibDef.Parser, new[]{ "TorchscriptArena" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Torch.ModelDef), global::Torch.ModelDef.Parser, new[]{ "ProtoVersion", "MainModule", "ProducerName", "ProducerVersion", "Tensors" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum ProtoVersion
    {
        [pbr::OriginalName("PROTO_VERSION_NEWEST")] Newest = 5,
    }

    #endregion

    #region Messages
    public sealed partial class RecordRef : pb::IMessage<RecordRef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<RecordRef> _parser = new pb::MessageParser<RecordRef>(() => new RecordRef());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordRef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordRef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordRef(RecordRef other) : this()
        {
            key_ = other.key_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordRef Clone()
        {
            return new RecordRef(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private readonly static string KeyDefaultValue = "";

        private string key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_ ?? KeyDefaultValue; }
            set
            {
                key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey
        {
            get { return key_ != null; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey()
        {
            key_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RecordRef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordRef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Key != other.Key) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasKey) hash ^= Key.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (HasKey)
            {
                output.WriteRawTag(10);
                output.WriteString(Key);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordRef other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasKey)
            {
                Key = other.Key;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            Key = input.ReadString();
                            break;
                        }
                }
            }
        }
#endif

    }

    public sealed partial class TensorDef : pb::IMessage<TensorDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<TensorDef> _parser = new pb::MessageParser<TensorDef>(() => new TensorDef());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TensorDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDef(TensorDef other) : this()
        {
            _hasBits0 = other._hasBits0;
            dims_ = other.dims_.Clone();
            offset_ = other.offset_;
            strides_ = other.strides_.Clone();
            requiresGrad_ = other.requiresGrad_;
            dataType_ = other.dataType_;
            data_ = other.data_ != null ? other.data_.Clone() : null;
            device_ = other.device_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDef Clone()
        {
            return new TensorDef(this);
        }

        /// <summary>Field number for the "dims" field.</summary>
        public const int DimsFieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_dims_codec
            = pb::FieldCodec.ForInt64(8);
        private readonly pbc::RepeatedField<long> dims_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Dims
        {
            get { return dims_; }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 2;
        private readonly static long OffsetDefaultValue = 0L;

        private long offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Offset
        {
            get { if ((_hasBits0 & 1) != 0) { return offset_; } else { return OffsetDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                offset_ = value;
            }
        }
        /// <summary>Gets whether the "offset" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOffset
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "offset" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOffset()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "strides" field.</summary>
        public const int StridesFieldNumber = 3;
        private static readonly pb::FieldCodec<long> _repeated_strides_codec
            = pb::FieldCodec.ForInt64(24);
        private readonly pbc::RepeatedField<long> strides_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Strides
        {
            get { return strides_; }
        }

        /// <summary>Field number for the "requires_grad" field.</summary>
        public const int RequiresGradFieldNumber = 4;
        private readonly static bool RequiresGradDefaultValue = false;

        private bool requiresGrad_;
        /// <summary>
        /// whether we compute the gradient for the parameter
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RequiresGrad
        {
            get { if ((_hasBits0 & 2) != 0) { return requiresGrad_; } else { return RequiresGradDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                requiresGrad_ = value;
            }
        }
        /// <summary>Gets whether the "requires_grad" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRequiresGrad
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "requires_grad" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRequiresGrad()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "data_type" field.</summary>
        public const int DataTypeFieldNumber = 5;
        private readonly static global::Caffe2.TensorProto.Types.DataType DataTypeDefaultValue = global::Caffe2.TensorProto.Types.DataType.Undefined;

        private global::Caffe2.TensorProto.Types.DataType dataType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Caffe2.TensorProto.Types.DataType DataType
        {
            get { if ((_hasBits0 & 4) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                dataType_ = value;
            }
        }
        /// <summary>Gets whether the "data_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataType
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "data_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataType()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 6;
        private global::Torch.RecordRef data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.RecordRef Data
        {
            get { return data_; }
            set
            {
                data_ = value;
            }
        }

        /// <summary>Field number for the "device" field.</summary>
        public const int DeviceFieldNumber = 7;
        private readonly static string DeviceDefaultValue = "";

        private string device_;
        /// <summary>
        /// device field stores the canonical device string, and it follows the
        /// format below: `(cpu|cuda)[:&lt;device-index>]`, e.g., 'cuda:0'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Device
        {
            get { return device_ ?? DeviceDefaultValue; }
            set
            {
                device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "device" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDevice
        {
            get { return device_ != null; }
        }
        /// <summary>Clears the value of the "device" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDevice()
        {
            device_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TensorDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TensorDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!dims_.Equals(other.dims_)) return false;
            if (Offset != other.Offset) return false;
            if (!strides_.Equals(other.strides_)) return false;
            if (RequiresGrad != other.RequiresGrad) return false;
            if (DataType != other.DataType) return false;
            if (!object.Equals(Data, other.Data)) return false;
            if (Device != other.Device) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= dims_.GetHashCode();
            if (HasOffset) hash ^= Offset.GetHashCode();
            hash ^= strides_.GetHashCode();
            if (HasRequiresGrad) hash ^= RequiresGrad.GetHashCode();
            if (HasDataType) hash ^= DataType.GetHashCode();
            if (data_ != null) hash ^= Data.GetHashCode();
            if (HasDevice) hash ^= Device.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      dims_.WriteTo(output, _repeated_dims_codec);
      if (HasOffset) {
        output.WriteRawTag(16);
        output.WriteInt64(Offset);
      }
      strides_.WriteTo(output, _repeated_strides_codec);
      if (HasRequiresGrad) {
        output.WriteRawTag(32);
        output.WriteBool(RequiresGrad);
      }
      if (HasDataType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DataType);
      }
      if (data_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Data);
      }
      if (HasDevice) {
        output.WriteRawTag(58);
        output.WriteString(Device);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            dims_.WriteTo(ref output, _repeated_dims_codec);
            if (HasOffset)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Offset);
            }
            strides_.WriteTo(ref output, _repeated_strides_codec);
            if (HasRequiresGrad)
            {
                output.WriteRawTag(32);
                output.WriteBool(RequiresGrad);
            }
            if (HasDataType)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)DataType);
            }
            if (data_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Data);
            }
            if (HasDevice)
            {
                output.WriteRawTag(58);
                output.WriteString(Device);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += dims_.CalculateSize(_repeated_dims_codec);
            if (HasOffset)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
            }
            size += strides_.CalculateSize(_repeated_strides_codec);
            if (HasRequiresGrad)
            {
                size += 1 + 1;
            }
            if (HasDataType)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DataType);
            }
            if (data_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
            }
            if (HasDevice)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TensorDef other)
        {
            if (other == null)
            {
                return;
            }
            dims_.Add(other.dims_);
            if (other.HasOffset)
            {
                Offset = other.Offset;
            }
            strides_.Add(other.strides_);
            if (other.HasRequiresGrad)
            {
                RequiresGrad = other.RequiresGrad;
            }
            if (other.HasDataType)
            {
                DataType = other.DataType;
            }
            if (other.data_ != null)
            {
                if (data_ == null)
                {
                    Data = new global::Torch.RecordRef();
                }
                Data.MergeFrom(other.Data);
            }
            if (other.HasDevice)
            {
                Device = other.Device;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            dims_.AddEntriesFrom(input, _repeated_dims_codec);
            break;
          }
          case 16: {
            Offset = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            strides_.AddEntriesFrom(input, _repeated_strides_codec);
            break;
          }
          case 32: {
            RequiresGrad = input.ReadBool();
            break;
          }
          case 40: {
            DataType = (global::Caffe2.TensorProto.Types.DataType) input.ReadEnum();
            break;
          }
          case 50: {
            if (data_ == null) {
              Data = new global::Torch.RecordRef();
            }
            input.ReadMessage(Data);
            break;
          }
          case 58: {
            Device = input.ReadString();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                    case 8:
                        {
                            dims_.AddEntriesFrom(ref input, _repeated_dims_codec);
                            break;
                        }
                    case 16:
                        {
                            Offset = input.ReadInt64();
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            strides_.AddEntriesFrom(ref input, _repeated_strides_codec);
                            break;
                        }
                    case 32:
                        {
                            RequiresGrad = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            DataType = (global::Caffe2.TensorProto.Types.DataType)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            if (data_ == null)
                            {
                                Data = new global::Torch.RecordRef();
                            }
                            input.ReadMessage(Data);
                            break;
                        }
                    case 58:
                        {
                            Device = input.ReadString();
                            break;
                        }
                }
            }
        }
#endif

    }

    public sealed partial class AttributeDef : pb::IMessage<AttributeDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<AttributeDef> _parser = new pb::MessageParser<AttributeDef>(() => new AttributeDef());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeDef(AttributeDef other) : this()
        {
            _hasBits0 = other._hasBits0;
            type_ = other.type_;
            name_ = other.name_;
            id_ = other.id_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeDef Clone()
        {
            return new AttributeDef(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static string TypeDefaultValue = "";

        private string type_;
        /// <summary>
        /// The mypy type of this attribute
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_ ?? TypeDefaultValue; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType
        {
            get { return type_ != null; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            type_ = null;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 3;
        private readonly static long IdDefaultValue = 0L;

        private long id_;
        /// <summary>
        /// Offset into attribute table
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id
        {
            get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                id_ = value;
            }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId()
        {
            _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AttributeDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Name != other.Name) return false;
            if (Id != other.Id) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasType) hash ^= Type.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (HasId) hash ^= Id.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasId) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (HasType)
            {
                output.WriteRawTag(10);
                output.WriteString(Type);
            }
            if (HasName)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (HasId)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Id);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasType)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeDef other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasType)
            {
                Type = other.Type;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasId)
            {
                Id = other.Id;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Id = input.ReadInt64();
                            break;
                        }
                }
            }
        }
#endif

    }

    public sealed partial class ParameterDef : pb::IMessage<ParameterDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<ParameterDef> _parser = new pb::MessageParser<ParameterDef>(() => new ParameterDef());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParameterDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDef(ParameterDef other) : this()
        {
            _hasBits0 = other._hasBits0;
            isBuffer_ = other.isBuffer_;
            tensorId_ = other.tensorId_;
            name_ = other.name_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDef Clone()
        {
            return new ParameterDef(this);
        }

        /// <summary>Field number for the "is_buffer" field.</summary>
        public const int IsBufferFieldNumber = 1;
        private readonly static bool IsBufferDefaultValue = false;

        private bool isBuffer_;
        /// <summary>
        /// whether this parameter is registered as buffer or not
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsBuffer
        {
            get { if ((_hasBits0 & 1) != 0) { return isBuffer_; } else { return IsBufferDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                isBuffer_ = value;
            }
        }
        /// <summary>Gets whether the "is_buffer" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsBuffer
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "is_buffer" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsBuffer()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "tensor_id" field.</summary>
        public const int TensorIdFieldNumber = 2;
        private readonly static long TensorIdDefaultValue = 0L;

        private long tensorId_;
        /// <summary>
        /// the offset into the tensor table where this parameter is stored
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TensorId
        {
            get { if ((_hasBits0 & 2) != 0) { return tensorId_; } else { return TensorIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                tensorId_ = value;
            }
        }
        /// <summary>Gets whether the "tensor_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTensorId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "tensor_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTensorId()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ParameterDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParameterDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (IsBuffer != other.IsBuffer) return false;
            if (TensorId != other.TensorId) return false;
            if (Name != other.Name) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasIsBuffer) hash ^= IsBuffer.GetHashCode();
            if (HasTensorId) hash ^= TensorId.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (HasIsBuffer) {
        output.WriteRawTag(8);
        output.WriteBool(IsBuffer);
      }
      if (HasTensorId) {
        output.WriteRawTag(16);
        output.WriteInt64(TensorId);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (HasIsBuffer)
            {
                output.WriteRawTag(8);
                output.WriteBool(IsBuffer);
            }
            if (HasTensorId)
            {
                output.WriteRawTag(16);
                output.WriteInt64(TensorId);
            }
            if (HasName)
            {
                output.WriteRawTag(26);
                output.WriteString(Name);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasIsBuffer)
            {
                size += 1 + 1;
            }
            if (HasTensorId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TensorId);
            }
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParameterDef other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasIsBuffer)
            {
                IsBuffer = other.IsBuffer;
            }
            if (other.HasTensorId)
            {
                TensorId = other.TensorId;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBuffer = input.ReadBool();
            break;
          }
          case 16: {
            TensorId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            IsBuffer = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            TensorId = input.ReadInt64();
                            break;
                        }
                    case 26:
                        {
                            Name = input.ReadString();
                            break;
                        }
                }
            }
        }
#endif

    }

    public sealed partial class ModuleDef : pb::IMessage<ModuleDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<ModuleDef> _parser = new pb::MessageParser<ModuleDef>(() => new ModuleDef());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModuleDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModuleDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModuleDef(ModuleDef other) : this()
        {
            _hasBits0 = other._hasBits0;
            submodules_ = other.submodules_.Clone();
            torchscriptArena_ = other.torchscriptArena_ != null ? other.torchscriptArena_.Clone() : null;
            caffe2Nets_ = other.caffe2Nets_.Clone();
            pickleArena_ = other.pickleArena_ != null ? other.pickleArena_.Clone() : null;
            cppArena_ = other.cppArena_ != null ? other.cppArena_.Clone() : null;
            parameters_ = other.parameters_.Clone();
            name_ = other.name_;
            optimize_ = other.optimize_;
            attributes_ = other.attributes_.Clone();
            getStateAttributeId_ = other.getStateAttributeId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModuleDef Clone()
        {
            return new ModuleDef(this);
        }

        /// <summary>Field number for the "submodules" field.</summary>
        public const int SubmodulesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Torch.ModuleDef> _repeated_submodules_codec
            = pb::FieldCodec.ForMessage(10, global::Torch.ModuleDef.Parser);
        private readonly pbc::RepeatedField<global::Torch.ModuleDef> submodules_ = new pbc::RepeatedField<global::Torch.ModuleDef>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Torch.ModuleDef> Submodules
        {
            get { return submodules_; }
        }

        /// <summary>Field number for the "torchscript_arena" field.</summary>
        public const int TorchscriptArenaFieldNumber = 2;
        private global::Torch.RecordRef torchscriptArena_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.RecordRef TorchscriptArena
        {
            get { return torchscriptArena_; }
            set
            {
                torchscriptArena_ = value;
            }
        }

        /// <summary>Field number for the "caffe2_nets" field.</summary>
        public const int Caffe2NetsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Caffe2.NetDef> _repeated_caffe2Nets_codec
            = pb::FieldCodec.ForMessage(26, global::Caffe2.NetDef.Parser);
        private readonly pbc::RepeatedField<global::Caffe2.NetDef> caffe2Nets_ = new pbc::RepeatedField<global::Caffe2.NetDef>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Caffe2.NetDef> Caffe2Nets
        {
            get { return caffe2Nets_; }
        }

        /// <summary>Field number for the "pickle_arena" field.</summary>
        public const int PickleArenaFieldNumber = 4;
        private global::Torch.RecordRef pickleArena_;
        /// <summary>
        /// because the old pickle modules may not be supported by torch_script,
        /// have to stored as pickle_arena at this moment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.RecordRef PickleArena
        {
            get { return pickleArena_; }
            set
            {
                pickleArena_ = value;
            }
        }

        /// <summary>Field number for the "cpp_arena" field.</summary>
        public const int CppArenaFieldNumber = 5;
        private global::Torch.RecordRef cppArena_;
        /// <summary>
        /// should be exposed by the Class Archive, so user can save
        /// module specific data which cannot be store in the graph or torch_script
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.RecordRef CppArena
        {
            get { return cppArena_; }
            set
            {
                cppArena_ = value;
            }
        }

        /// <summary>Field number for the "parameters" field.</summary>
        public const int ParametersFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Torch.ParameterDef> _repeated_parameters_codec
            = pb::FieldCodec.ForMessage(50, global::Torch.ParameterDef.Parser);
        private readonly pbc::RepeatedField<global::Torch.ParameterDef> parameters_ = new pbc::RepeatedField<global::Torch.ParameterDef>();
        /// <summary>
        /// the parameters of this module
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Torch.ParameterDef> Parameters
        {
            get { return parameters_; }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 7;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "optimize" field.</summary>
        public const int OptimizeFieldNumber = 8;
        private readonly static bool OptimizeDefaultValue = false;

        private bool optimize_;
        /// <summary>
        /// whether apply the optimizations to this module, only applicable to
        /// script modules
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Optimize
        {
            get { if ((_hasBits0 & 1) != 0) { return optimize_; } else { return OptimizeDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                optimize_ = value;
            }
        }
        /// <summary>Gets whether the "optimize" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOptimize
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "optimize" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOptimize()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "attributes" field.</summary>
        public const int AttributesFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Torch.AttributeDef> _repeated_attributes_codec
            = pb::FieldCodec.ForMessage(74, global::Torch.AttributeDef.Parser);
        private readonly pbc::RepeatedField<global::Torch.AttributeDef> attributes_ = new pbc::RepeatedField<global::Torch.AttributeDef>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Torch.AttributeDef> Attributes
        {
            get { return attributes_; }
        }

        /// <summary>Field number for the "get_state_attribute_id" field.</summary>
        public const int GetStateAttributeIdFieldNumber = 10;
        private readonly static long GetStateAttributeIdDefaultValue = 0L;

        private long getStateAttributeId_;
        /// <summary>
        /// Used for retrieving module state from the pickled IValues table
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long GetStateAttributeId
        {
            get { if ((_hasBits0 & 2) != 0) { return getStateAttributeId_; } else { return GetStateAttributeIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                getStateAttributeId_ = value;
            }
        }
        /// <summary>Gets whether the "get_state_attribute_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGetStateAttributeId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "get_state_attribute_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGetStateAttributeId()
        {
            _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModuleDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModuleDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!submodules_.Equals(other.submodules_)) return false;
            if (!object.Equals(TorchscriptArena, other.TorchscriptArena)) return false;
            if (!caffe2Nets_.Equals(other.caffe2Nets_)) return false;
            if (!object.Equals(PickleArena, other.PickleArena)) return false;
            if (!object.Equals(CppArena, other.CppArena)) return false;
            if (!parameters_.Equals(other.parameters_)) return false;
            if (Name != other.Name) return false;
            if (Optimize != other.Optimize) return false;
            if (!attributes_.Equals(other.attributes_)) return false;
            if (GetStateAttributeId != other.GetStateAttributeId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= submodules_.GetHashCode();
            if (torchscriptArena_ != null) hash ^= TorchscriptArena.GetHashCode();
            hash ^= caffe2Nets_.GetHashCode();
            if (pickleArena_ != null) hash ^= PickleArena.GetHashCode();
            if (cppArena_ != null) hash ^= CppArena.GetHashCode();
            hash ^= parameters_.GetHashCode();
            if (HasName) hash ^= Name.GetHashCode();
            if (HasOptimize) hash ^= Optimize.GetHashCode();
            hash ^= attributes_.GetHashCode();
            if (HasGetStateAttributeId) hash ^= GetStateAttributeId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      submodules_.WriteTo(output, _repeated_submodules_codec);
      if (torchscriptArena_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TorchscriptArena);
      }
      caffe2Nets_.WriteTo(output, _repeated_caffe2Nets_codec);
      if (pickleArena_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PickleArena);
      }
      if (cppArena_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CppArena);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (HasName) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (HasOptimize) {
        output.WriteRawTag(64);
        output.WriteBool(Optimize);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (HasGetStateAttributeId) {
        output.WriteRawTag(80);
        output.WriteInt64(GetStateAttributeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            submodules_.WriteTo(ref output, _repeated_submodules_codec);
            if (torchscriptArena_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(TorchscriptArena);
            }
            caffe2Nets_.WriteTo(ref output, _repeated_caffe2Nets_codec);
            if (pickleArena_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(PickleArena);
            }
            if (cppArena_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CppArena);
            }
            parameters_.WriteTo(ref output, _repeated_parameters_codec);
            if (HasName)
            {
                output.WriteRawTag(58);
                output.WriteString(Name);
            }
            if (HasOptimize)
            {
                output.WriteRawTag(64);
                output.WriteBool(Optimize);
            }
            attributes_.WriteTo(ref output, _repeated_attributes_codec);
            if (HasGetStateAttributeId)
            {
                output.WriteRawTag(80);
                output.WriteInt64(GetStateAttributeId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += submodules_.CalculateSize(_repeated_submodules_codec);
            if (torchscriptArena_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TorchscriptArena);
            }
            size += caffe2Nets_.CalculateSize(_repeated_caffe2Nets_codec);
            if (pickleArena_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickleArena);
            }
            if (cppArena_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CppArena);
            }
            size += parameters_.CalculateSize(_repeated_parameters_codec);
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasOptimize)
            {
                size += 1 + 1;
            }
            size += attributes_.CalculateSize(_repeated_attributes_codec);
            if (HasGetStateAttributeId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetStateAttributeId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModuleDef other)
        {
            if (other == null)
            {
                return;
            }
            submodules_.Add(other.submodules_);
            if (other.torchscriptArena_ != null)
            {
                if (torchscriptArena_ == null)
                {
                    TorchscriptArena = new global::Torch.RecordRef();
                }
                TorchscriptArena.MergeFrom(other.TorchscriptArena);
            }
            caffe2Nets_.Add(other.caffe2Nets_);
            if (other.pickleArena_ != null)
            {
                if (pickleArena_ == null)
                {
                    PickleArena = new global::Torch.RecordRef();
                }
                PickleArena.MergeFrom(other.PickleArena);
            }
            if (other.cppArena_ != null)
            {
                if (cppArena_ == null)
                {
                    CppArena = new global::Torch.RecordRef();
                }
                CppArena.MergeFrom(other.CppArena);
            }
            parameters_.Add(other.parameters_);
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasOptimize)
            {
                Optimize = other.Optimize;
            }
            attributes_.Add(other.attributes_);
            if (other.HasGetStateAttributeId)
            {
                GetStateAttributeId = other.GetStateAttributeId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            submodules_.AddEntriesFrom(input, _repeated_submodules_codec);
            break;
          }
          case 18: {
            if (torchscriptArena_ == null) {
              TorchscriptArena = new global::Torch.RecordRef();
            }
            input.ReadMessage(TorchscriptArena);
            break;
          }
          case 26: {
            caffe2Nets_.AddEntriesFrom(input, _repeated_caffe2Nets_codec);
            break;
          }
          case 34: {
            if (pickleArena_ == null) {
              PickleArena = new global::Torch.RecordRef();
            }
            input.ReadMessage(PickleArena);
            break;
          }
          case 42: {
            if (cppArena_ == null) {
              CppArena = new global::Torch.RecordRef();
            }
            input.ReadMessage(CppArena);
            break;
          }
          case 50: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Optimize = input.ReadBool();
            break;
          }
          case 74: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 80: {
            GetStateAttributeId = input.ReadInt64();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            submodules_.AddEntriesFrom(ref input, _repeated_submodules_codec);
                            break;
                        }
                    case 18:
                        {
                            if (torchscriptArena_ == null)
                            {
                                TorchscriptArena = new global::Torch.RecordRef();
                            }
                            input.ReadMessage(TorchscriptArena);
                            break;
                        }
                    case 26:
                        {
                            caffe2Nets_.AddEntriesFrom(ref input, _repeated_caffe2Nets_codec);
                            break;
                        }
                    case 34:
                        {
                            if (pickleArena_ == null)
                            {
                                PickleArena = new global::Torch.RecordRef();
                            }
                            input.ReadMessage(PickleArena);
                            break;
                        }
                    case 42:
                        {
                            if (cppArena_ == null)
                            {
                                CppArena = new global::Torch.RecordRef();
                            }
                            input.ReadMessage(CppArena);
                            break;
                        }
                    case 50:
                        {
                            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
                            break;
                        }
                    case 58:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 64:
                        {
                            Optimize = input.ReadBool();
                            break;
                        }
                    case 74:
                        {
                            attributes_.AddEntriesFrom(ref input, _repeated_attributes_codec);
                            break;
                        }
                    case 80:
                        {
                            GetStateAttributeId = input.ReadInt64();
                            break;
                        }
                }
            }
        }
#endif

    }

    /// <summary>
    /// Represents all non-module code that the model depends on.
    /// Right now it's just a straight list of classes, defined in dependency order
    /// (i.e. dependencies appear before their dependers)
    /// </summary>
    public sealed partial class LibDef : pb::IMessage<LibDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<LibDef> _parser = new pb::MessageParser<LibDef>(() => new LibDef());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LibDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LibDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LibDef(LibDef other) : this()
        {
            torchscriptArena_ = other.torchscriptArena_ != null ? other.torchscriptArena_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LibDef Clone()
        {
            return new LibDef(this);
        }

        /// <summary>Field number for the "torchscript_arena" field.</summary>
        public const int TorchscriptArenaFieldNumber = 1;
        private global::Torch.RecordRef torchscriptArena_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.RecordRef TorchscriptArena
        {
            get { return torchscriptArena_; }
            set
            {
                torchscriptArena_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LibDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LibDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(TorchscriptArena, other.TorchscriptArena)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (torchscriptArena_ != null) hash ^= TorchscriptArena.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (torchscriptArena_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TorchscriptArena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (torchscriptArena_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(TorchscriptArena);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (torchscriptArena_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TorchscriptArena);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LibDef other)
        {
            if (other == null)
            {
                return;
            }
            if (other.torchscriptArena_ != null)
            {
                if (torchscriptArena_ == null)
                {
                    TorchscriptArena = new global::Torch.RecordRef();
                }
                TorchscriptArena.MergeFrom(other.TorchscriptArena);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (torchscriptArena_ == null) {
              TorchscriptArena = new global::Torch.RecordRef();
            }
            input.ReadMessage(TorchscriptArena);
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            if (torchscriptArena_ == null)
                            {
                                TorchscriptArena = new global::Torch.RecordRef();
                            }
                            input.ReadMessage(TorchscriptArena);
                            break;
                        }
                }
            }
        }
#endif

    }

    public sealed partial class ModelDef : pb::IMessage<ModelDef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<ModelDef> _parser = new pb::MessageParser<ModelDef>(() => new ModelDef());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelDef> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Torch.Caffe2ProtoTorchReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelDef()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelDef(ModelDef other) : this()
        {
            _hasBits0 = other._hasBits0;
            protoVersion_ = other.protoVersion_;
            mainModule_ = other.mainModule_ != null ? other.mainModule_.Clone() : null;
            producerName_ = other.producerName_;
            producerVersion_ = other.producerVersion_;
            tensors_ = other.tensors_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelDef Clone()
        {
            return new ModelDef(this);
        }

        /// <summary>Field number for the "proto_version" field.</summary>
        public const int ProtoVersionFieldNumber = 1;
        private readonly static long ProtoVersionDefaultValue = 0L;

        private long protoVersion_;
        /// <summary>
        /// for the proto version, to keep both backward and forward
        /// compatibility, please bump the proto_version when we add any
        /// change in the proto. runtime decides whether accept the
        /// model based on the ir_version.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ProtoVersion
        {
            get { if ((_hasBits0 & 1) != 0) { return protoVersion_; } else { return ProtoVersionDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                protoVersion_ = value;
            }
        }
        /// <summary>Gets whether the "proto_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProtoVersion
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "proto_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProtoVersion()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "main_module" field.</summary>
        public const int MainModuleFieldNumber = 2;
        private global::Torch.ModuleDef mainModule_;
        /// <summary>
        /// main module of the model
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Torch.ModuleDef MainModule
        {
            get { return mainModule_; }
            set
            {
                mainModule_ = value;
            }
        }

        /// <summary>Field number for the "producer_name" field.</summary>
        public const int ProducerNameFieldNumber = 3;
        private readonly static string ProducerNameDefaultValue = "";

        private string producerName_;
        /// <summary>
        /// to distinguish whether exported from c2 or torch
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProducerName
        {
            get { return producerName_ ?? ProducerNameDefaultValue; }
            set
            {
                producerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "producer_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProducerName
        {
            get { return producerName_ != null; }
        }
        /// <summary>Clears the value of the "producer_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProducerName()
        {
            producerName_ = null;
        }

        /// <summary>Field number for the "producer_version" field.</summary>
        public const int ProducerVersionFieldNumber = 4;
        private readonly static string ProducerVersionDefaultValue = "";

        private string producerVersion_;
        /// <summary>
        /// put build version here
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProducerVersion
        {
            get { return producerVersion_ ?? ProducerVersionDefaultValue; }
            set
            {
                producerVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "producer_version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProducerVersion
        {
            get { return producerVersion_ != null; }
        }
        /// <summary>Clears the value of the "producer_version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProducerVersion()
        {
            producerVersion_ = null;
        }

        /// <summary>Field number for the "tensors" field.</summary>
        public const int TensorsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Torch.TensorDef> _repeated_tensors_codec
            = pb::FieldCodec.ForMessage(42, global::Torch.TensorDef.Parser);
        private readonly pbc::RepeatedField<global::Torch.TensorDef> tensors_ = new pbc::RepeatedField<global::Torch.TensorDef>();
        /// <summary>
        /// the table contains all the tensor information
        /// the tensor id is defined as TensorProto.name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Torch.TensorDef> Tensors
        {
            get { return tensors_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelDef);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelDef other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ProtoVersion != other.ProtoVersion) return false;
            if (!object.Equals(MainModule, other.MainModule)) return false;
            if (ProducerName != other.ProducerName) return false;
            if (ProducerVersion != other.ProducerVersion) return false;
            if (!tensors_.Equals(other.tensors_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasProtoVersion) hash ^= ProtoVersion.GetHashCode();
            if (mainModule_ != null) hash ^= MainModule.GetHashCode();
            if (HasProducerName) hash ^= ProducerName.GetHashCode();
            if (HasProducerVersion) hash ^= ProducerVersion.GetHashCode();
            hash ^= tensors_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (HasProtoVersion) {
        output.WriteRawTag(8);
        output.WriteInt64(ProtoVersion);
      }
      if (mainModule_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainModule);
      }
      if (HasProducerName) {
        output.WriteRawTag(26);
        output.WriteString(ProducerName);
      }
      if (HasProducerVersion) {
        output.WriteRawTag(34);
        output.WriteString(ProducerVersion);
      }
      tensors_.WriteTo(output, _repeated_tensors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (HasProtoVersion)
            {
                output.WriteRawTag(8);
                output.WriteInt64(ProtoVersion);
            }
            if (mainModule_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(MainModule);
            }
            if (HasProducerName)
            {
                output.WriteRawTag(26);
                output.WriteString(ProducerName);
            }
            if (HasProducerVersion)
            {
                output.WriteRawTag(34);
                output.WriteString(ProducerVersion);
            }
            tensors_.WriteTo(ref output, _repeated_tensors_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasProtoVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProtoVersion);
            }
            if (mainModule_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainModule);
            }
            if (HasProducerName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerName);
            }
            if (HasProducerVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerVersion);
            }
            size += tensors_.CalculateSize(_repeated_tensors_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelDef other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasProtoVersion)
            {
                ProtoVersion = other.ProtoVersion;
            }
            if (other.mainModule_ != null)
            {
                if (mainModule_ == null)
                {
                    MainModule = new global::Torch.ModuleDef();
                }
                MainModule.MergeFrom(other.MainModule);
            }
            if (other.HasProducerName)
            {
                ProducerName = other.ProducerName;
            }
            if (other.HasProducerVersion)
            {
                ProducerVersion = other.ProducerVersion;
            }
            tensors_.Add(other.tensors_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtoVersion = input.ReadInt64();
            break;
          }
          case 18: {
            if (mainModule_ == null) {
              MainModule = new global::Torch.ModuleDef();
            }
            input.ReadMessage(MainModule);
            break;
          }
          case 26: {
            ProducerName = input.ReadString();
            break;
          }
          case 34: {
            ProducerVersion = input.ReadString();
            break;
          }
          case 42: {
            tensors_.AddEntriesFrom(input, _repeated_tensors_codec);
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            ProtoVersion = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            if (mainModule_ == null)
                            {
                                MainModule = new global::Torch.ModuleDef();
                            }
                            input.ReadMessage(MainModule);
                            break;
                        }
                    case 26:
                        {
                            ProducerName = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ProducerVersion = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            tensors_.AddEntriesFrom(ref input, _repeated_tensors_codec);
                            break;
                        }
                }
            }
        }
#endif

    }

    #endregion

}

#endregion Designer generated code
